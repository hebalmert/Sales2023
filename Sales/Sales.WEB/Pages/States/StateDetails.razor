@page "/states/details/{StateId:int}"
@inject IRepository _repository
@inject NavigationManager _navigation
@inject SweetAlertService _sweetAlert

@if (State is null)
{
    <p>Cargando...</p>
}
else
{
    <h3>@State.Name</h3>
    <div class="mb-2">
        <a class="btn btn-primary" href="/cities/create/@State.Id">Nueva Ciuadad</a>
        <a class="btn btn-success" href="/countries/details/@State.CountryId">Regresar</a>
    </div>

    <GenericList MyList="Cities">
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Ciudad</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Cities!)
                    {
                        <tr>
                            <td>
                                @item.Name
                            </td>
                            <td>
                                <a class="btn btn-warning" href="/cities/edit/@item.Id">Editar</a>
                                <button class="btn btn-danger" @onclick=@(() => DeleteAsync(item.Id))>Borrar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>
}

@code {
    private State? State;
    private List<City>? Cities;

    [Parameter]
    public int StateId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await _repository.Get<State>($"/api/states/{StateId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                _navigation.NavigateTo("/countries");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await _sweetAlert.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        State = responseHttp.Response;
        Cities = State!.Cities!.ToList();
    }

    private async Task DeleteAsync(int cityId)
    {
        var result = await _sweetAlert.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Realmente deseas eliminar el registro?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Si"
        });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await _repository.Delete($"/api/cities/{cityId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await _sweetAlert.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }
}


