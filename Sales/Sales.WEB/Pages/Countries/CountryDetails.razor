@page "/countries/details/{Id:int}"
@inject IRepository _repository
@inject NavigationManager _navigation
@inject SweetAlertService _sweetAlert
@attribute [Authorize(Roles = "Admin")]

@if (Country is null)
{
    <p>Cargando...</p>
}
else
{
    <h3>@Country.Name</h3>

    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
        <div>
            <a class="btn btn-primary" href="/states/create/@Country.Id">Nuevo Estado/Departamento</a>
            <a class="btn btn-success" href="/countries">Regresar</a>
        </div>
        <div class="mx-2">
            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar estado/departamento..." @bind-value="Filter" />
        </div>
        <div>
            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Buscar</button>
            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Listar</button>
        </div>
    </div>


    <GenericList MyList="States">
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Estado / Departamento</th>
                        <th>Ciudades</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in States!)
                    {
                        <tr>
                            <td>
                                @item.Name
                            </td>
                            <td>
                                @item.CitiesNumber
                            </td>
                            <td>
                                <a class="btn btn-info" href="/states/details/@item.Id">Detalles</a>
                                <a class="btn btn-warning" href="/states/edit/@item.Id">Editar</a>
                                <button class="btn btn-danger" @onclick=@(() => DeleteAsync(item.Id))>Borrar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>

    <Pagination CurrentPage="currentPage"
                TotalPages="totalPages"
                SelectedPage="SelectedPage" />

}


@code {

    private Country? Country;

    private List<State>? States;

    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    public int Id { get; set; }

    //Para Poder hacer Los Filtrados
    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";


    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }


    private async Task LoadAsync(int page = 1)
    {
        //var responseHttp = await _repository.Get<Country>($"/api/countries/{Id}");
        //if (responseHttp.Error)
        //{
        //   if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
        //    {
        //        _navigation.NavigateTo("/countries");
        //        return;
        //    }
        //
        //   var message = await responseHttp.GetErrorMessageAsync();
        //   await _sweetAlert.FireAsync("Error", message, SweetAlertIcon.Error);
        //   return;
        //}

        //Country = responseHttp.Response;
        //States = Country!.States!.ToList();
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/states?id={Id}&page={page}";
            url2 = $"api/states/totalPages?id={Id}";
        }
        else
        {
            url1 = $"api/states?id={Id}&page={page}&filter={Filter}";
            url2 = $"api/states/totalPages?id={Id}&filter={Filter}";
        }

        var responseHppt = await _repository.Get<Country>($"api/countries/{Id}");
        var responseHppt2 = await _repository.Get<List<State>>(url1);
        var responseHppt3 = await _repository.Get<int>(url2);
        Country = responseHppt.Response;
        States = responseHppt2.Response;
        totalPages = responseHppt3.Response;

    }

    private async Task DeleteAsync(int id)
    {
        var result = await _sweetAlert.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Realmente deseas eliminar el registro?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Si"
        });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await _repository.Delete($"/api/states/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await _sweetAlert.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPage(page);
    }


}

