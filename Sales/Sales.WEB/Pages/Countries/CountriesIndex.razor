@page "/countries"
@inject IRepository _repository
@inject NavigationManager _navigation
@inject SweetAlertService _sweetAlert


<h3>Paises</h3>

<a class="btn btn-primary" href="/countries/create">Nuevo Pais</a>

<GenericList MyList="Countries">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Pais</th>
                    <th>Departamentos/Estados</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Countries!)
                {
                    <tr>
                        <td>
                            @item.Name
                        </td>
                        <td>
                            @item.StatesNumber
                        </td>
                        <td>
                            <a class="btn btn-warning" href="/countries/edit/@item.Id">Editar</a>
                            <a href="/countries/details/@item.Id" class="btn btn-info">Detalles</a>
                            <button class="btn btn-danger" @onclick=@(()=> DeleteAsync(item.Id))>Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

<Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPage" />

@code {

    private int currentPage = 1;
    private int totalPages;

    public List<Country>? Countries { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        string url1 = $"api/countries?page={page}";
        string url2 = $"api/countries/totalPages";

        var responseHppt = await _repository.Get<List<Country>>(url1);
        var responseHppt2 = await _repository.Get<int>(url2);
        Countries = responseHppt.Response!;
        totalPages = responseHppt2.Response!;

    }

    private async Task DeleteAsync(int id)
    {
        var result = await _sweetAlert.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Realmente desdeas Eliminar el Registro?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Si"
        });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await _repository.Delete($"/api/countries/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await _sweetAlert.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }
}

