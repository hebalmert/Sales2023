@page "/countries"
@inject IRepository _repository
@inject NavigationManager _navigation
@inject SweetAlertService _sweetAlert


<h3>Paises</h3>

<a class="btn btn-primary" href="/countries/create">Nuevo Pais</a>

<GenericList MyList="Countries">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Pais</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Countries!)
                {
                    <tr>
                        <td>
                            <a class="btn btn-warning" href="/countries/edit/@item.Id">Editar</a>
                            <button class="btn btn-danger" @onclick=@(()=> DeleteAsync(item.Id))>Borrar</button>
                        </td>
                        <td>
                            @item.Name
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>


@code {
    public List<Country>? Countries { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await _repository.Get<List<Country>>("/api/countries");
        Countries = responseHttp.Response;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await _sweetAlert.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Realmente desdeas Eliminar el Registro?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Si"
        });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await _repository.Delete($"/api/countries/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await _sweetAlert.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }
}

